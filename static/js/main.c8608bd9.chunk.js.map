{"version":3,"sources":["Suncrown - Legend of the Forgotten Centuries.mp3","components/slider/Slider.js","components/controls/Button.js","components/controls/ControlPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Slider","percentage","onChange","useState","position","setPosition","marginLeft","setMarginLeft","progressBarWidth","setProgressBarWidth","rangeRef","useRef","thumbRef","useEffect","rangeWidth","current","getBoundingClientRect","width","thumbWidth","centerThumb","centerProgressBar","className","style","ref","left","type","value","step","Button","play","isPlaying","onClick","ControlPanel","duration","currentTime","secondsToHms","seconds","hours","min","parseInt","sec","App","setPercentage","setIsPlaying","setDuration","setCurrentTime","audioRef","e","audio","target","onTimeUpdate","percent","currentTarget","toFixed","time","onLoadedData","src","song","volume","pause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAAe,MAA0B,yE,YCmD1BA,MA/Cf,YAA+C,IAAD,IAA5BC,kBAA4B,MAAf,EAAe,EAAZC,EAAY,EAAZA,SAAY,EACZC,mBAAS,GADG,mBACrCC,EADqC,KAC3BC,EAD2B,OAERF,mBAAS,GAFD,mBAErCG,EAFqC,KAEzBC,EAFyB,OAGIJ,mBAAS,GAHb,mBAGrCK,EAHqC,KAGnBC,EAHmB,KAKtCC,EAAWC,mBACXC,EAAWD,mBAajB,OAXAE,qBAAU,WACR,IAAMC,EAAaJ,EAASK,QAAQC,wBAAwBC,MACtDC,EAAaN,EAASG,QAAQC,wBAAwBC,MACtDE,EAAeD,EAAa,IAAOjB,GAAc,EACjDmB,EACJF,EAAcJ,EAAa,IAAOb,EAAciB,EAAa,IAAOjB,EACtEI,EAAYJ,GACZM,EAAcY,GACdV,EAAoBW,KACnB,CAACnB,IAGF,sBAAKoB,UAAU,mBAAf,UACE,qBACEA,UAAU,qBACVC,MAAO,CACLL,MAAM,GAAD,OAAKT,EAAL,SAGT,qBACEa,UAAU,QACVE,IAAKX,EACLU,MAAO,CACLE,KAAK,GAAD,OAAKpB,EAAL,KACJE,WAAW,GAAD,OAAKA,EAAL,SAGd,uBACEmB,KAAK,QACLC,MAAOtB,EACPmB,IAAKb,EACLiB,KAAK,OACLN,UAAU,QACVnB,SAAUA,Q,MCnCH0B,MAPf,YAAsC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UACtB,OACE,qBAAKT,UAAU,gBAAf,SACE,qBAAKU,QAASF,EAAMR,UAAWS,EAAY,WAAa,gB,MCmC/CE,MArCf,YAAmE,IAA3CH,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,UAAWG,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACjD,SAASC,EAAaC,GACpB,IAAKA,EAAS,MAAO,UAErB,IAAIH,EAAWG,EACXC,EAAQJ,EAAW,KACvBA,GAAsB,KAEtB,IAAIK,EAAMC,SAASN,EAAW,IAC9BA,GAAsB,GAEtB,IAAIO,EAAMD,SAASN,GASnB,OAPIO,EAAM,KACRA,EAAG,WAAOA,IAERF,EAAM,KACRA,EAAG,WAAOA,IAGRC,SAASF,EAAO,IAAM,EAClB,GAAN,OAAUE,SAASF,EAAO,IAA1B,aAAkCC,EAAlC,aAA0CE,EAA1C,KACgB,GAAPF,EACH,OAAN,OAAcE,EAAd,KAEM,GAAN,OAAUF,EAAV,aAAkBE,EAAlB,KAIJ,OACE,sBAAKnB,UAAU,gBAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBc,EAAaD,KACrC,cAAC,EAAD,CAAQL,KAAMA,EAAMC,UAAWA,IAC/B,qBAAKT,UAAU,QAAf,SAAwBc,EAAaF,SC2B5BQ,MA3Df,WAAgB,IAAD,EACuBtC,mBAAS,GADhC,mBACNF,EADM,KACMyC,EADN,OAEqBvC,oBAAS,GAF9B,mBAEN2B,EAFM,KAEKa,EAFL,OAGmBxC,mBAAS,GAH5B,mBAGN8B,EAHM,KAGIW,EAHJ,OAIyBzC,mBAAS,GAJlC,mBAIN+B,EAJM,KAIOW,EAJP,KAMPC,EAAWnC,mBA+BjB,OACE,sBAAKU,UAAU,gBAAf,UACE,8CACA,cAAC,EAAD,CAAQpB,WAAYA,EAAYC,SAhCnB,SAAC6C,GAChB,IAAMC,EAAQF,EAAS/B,QACvBiC,EAAMd,YAAec,EAAMf,SAAW,IAAOc,EAAEE,OAAOvB,MACtDgB,EAAcK,EAAEE,OAAOvB,UA8BrB,uBACEH,IAAKuB,EACLI,aAdkB,SAACH,GACvB,IAAMI,GAAYJ,EAAEK,cAAclB,YAAca,EAAEK,cAAcnB,SAAY,KAAKoB,QAAQ,GACnFC,EAAOP,EAAEK,cAAclB,YAE7BQ,GAAeS,GACfN,EAAeS,EAAKD,QAAQ,KAUxBE,aAAc,SAACR,GACbH,EAAYG,EAAEK,cAAcnB,SAASoB,QAAQ,KAE/CG,IAAKC,IAEP,cAAC,EAAD,CACE5B,KApCO,WACX,IAAMmB,EAAQF,EAAS/B,QACvBiC,EAAMU,OAAS,GAEV5B,IACHa,GAAa,GACbK,EAAMnB,QAGJC,IACFa,GAAa,GACbK,EAAMW,UA0BJ7B,UAAWA,EACXG,SAAUA,EACVC,YAAaA,QC9CN0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8608bd9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Suncrown - Legend of the Forgotten Centuries.7fc833c5.mp3\";","import { useState, useRef, useEffect } from 'react'\r\nimport './slider.css'\r\nimport './thumb.css'\r\n\r\nfunction Slider({ percentage = 0, onChange }) {\r\n  const [position, setPosition] = useState(0)\r\n  const [marginLeft, setMarginLeft] = useState(0)\r\n  const [progressBarWidth, setProgressBarWidth] = useState(0)\r\n\r\n  const rangeRef = useRef()\r\n  const thumbRef = useRef()\r\n\r\n  useEffect(() => {\r\n    const rangeWidth = rangeRef.current.getBoundingClientRect().width\r\n    const thumbWidth = thumbRef.current.getBoundingClientRect().width\r\n    const centerThumb = (thumbWidth / 100) * percentage * -1\r\n    const centerProgressBar =\r\n      thumbWidth + (rangeWidth / 100) * percentage - (thumbWidth / 100) * percentage\r\n    setPosition(percentage)\r\n    setMarginLeft(centerThumb)\r\n    setProgressBarWidth(centerProgressBar)\r\n  }, [percentage])\r\n\r\n  return (\r\n    <div className='slider-container'>\r\n      <div\r\n        className='progress-bar-cover'\r\n        style={{\r\n          width: `${progressBarWidth}px`\r\n        }}\r\n      ></div>\r\n      <div\r\n        className='thumb'\r\n        ref={thumbRef}\r\n        style={{\r\n          left: `${position}%`,\r\n          marginLeft: `${marginLeft}px`\r\n        }}\r\n      ></div>\r\n      <input\r\n        type='range'\r\n        value={position}\r\n        ref={rangeRef}\r\n        step='0.01'\r\n        className='range'\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","import React from 'react'\r\nimport './button.css'\r\n\r\nfunction Button({ play, isPlaying }) {\r\n  return (\r\n    <div className='btn-container'>\r\n      <div onClick={play} className={isPlaying ? 'btn-stop' : 'btn-play'}></div>\r\n    </div>\r\n  )\r\n}\r\nexport default Button\r\n","import React from 'react'\r\nimport Button from './Button'\r\nimport './control-panel.css'\r\n\r\nfunction ControlPanel({ play, isPlaying, duration, currentTime }) {\r\n  function secondsToHms(seconds) {\r\n    if (!seconds) return '00m 00s'\r\n\r\n    let duration = seconds\r\n    let hours = duration / 3600\r\n    duration = duration % 3600\r\n\r\n    let min = parseInt(duration / 60)\r\n    duration = duration % 60\r\n\r\n    let sec = parseInt(duration)\r\n\r\n    if (sec < 10) {\r\n      sec = `0${sec}`\r\n    }\r\n    if (min < 10) {\r\n      min = `0${min}`\r\n    }\r\n\r\n    if (parseInt(hours, 10) > 0) {\r\n      return `${parseInt(hours, 10)}h ${min}m ${sec}s`\r\n    } else if (min == 0) {\r\n      return `00m ${sec}s`\r\n    } else {\r\n      return `${min}m ${sec}s`\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='control-panel'>\r\n      <div className='timer'>{secondsToHms(currentTime)}</div>\r\n      <Button play={play} isPlaying={isPlaying} />\r\n      <div className='timer'>{secondsToHms(duration)}</div>\r\n    </div>\r\n  )\r\n}\r\nexport default ControlPanel\r\n","import { useState, useRef } from 'react'\nimport song from './Suncrown - Legend of the Forgotten Centuries.mp3'\nimport Slider from './components/slider/Slider'\nimport ControlPanel from './components/controls/ControlPanel'\n\nfunction App() {\n  const [percentage, setPercentage] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [duration, setDuration] = useState(0)\n  const [currentTime, setCurrentTime] = useState(0)\n\n  const audioRef = useRef()\n\n  const onChange = (e) => {\n    const audio = audioRef.current\n    audio.currentTime = (audio.duration / 100) * e.target.value\n    setPercentage(e.target.value)\n  }\n\n  const play = () => {\n    const audio = audioRef.current\n    audio.volume = 0.1\n\n    if (!isPlaying) {\n      setIsPlaying(true)\n      audio.play()\n    }\n\n    if (isPlaying) {\n      setIsPlaying(false)\n      audio.pause()\n    }\n  }\n\n  const getCurrDuration = (e) => {\n    const percent = ((e.currentTarget.currentTime / e.currentTarget.duration) * 100).toFixed(2)\n    const time = e.currentTarget.currentTime\n\n    setPercentage(+percent)\n    setCurrentTime(time.toFixed(2))\n  }\n\n  return (\n    <div className='app-container'>\n      <h1>Audio Player</h1>\n      <Slider percentage={percentage} onChange={onChange} />\n      <audio\n        ref={audioRef}\n        onTimeUpdate={getCurrDuration}\n        onLoadedData={(e) => {\n          setDuration(e.currentTarget.duration.toFixed(2))\n        }}\n        src={song}\n      ></audio>\n      <ControlPanel\n        play={play}\n        isPlaying={isPlaying}\n        duration={duration}\n        currentTime={currentTime}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}